version: "3"

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - server
    networks:
      - stackapi
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./deploy/grafana/provisioning/datasources/prometheus-datasource.yml:/etc/grafana/provisioning/datasources/prometheus-datasource.yml
      - grafana-storage:/var/lib/grafana
    networks:
      - stackapi
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: server
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - stackapi
  postgres:
    image: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: dvdrental
      POSTGRES_PASSWORD: 123
    networks:
      - stackapi
    volumes:
      - C:\Users\emrez\Desktop\Microservis\backup\dvdrental.tar:/backup/dvdrental.tar
      - C:\Users\emrez\Desktop\Microservis\backup\restore.sh:/docker-entrypoint-initdb.d/restore.sh
  redis:
    image: redis
    container_name: redis
    ports: 
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass emredis
    networks:
      - stackapi
    
  jaeger:
    image: jaegertracing/all-in-one:1.70.0
    container_name: jaeger
    depends_on:
      - server
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
    networks:
      - stackapi

volumes:
  grafana-storage:

networks:
  stackapi:
    driver: bridge
